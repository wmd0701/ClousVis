// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Iterator
#pragma kernel Reconstructor

// Utilities.
#include "UnityCG.cginc"

// Dimensions of the texture.
static const float xDim = 7504.0f;
static const float yDim = 7781.0f;
static const float zDim = 198.17;

// Maximal magnitudes of wind in each spatial dimension.
static const float minU = -13.1579f;
static const float maxU = 47.3699f;
static const float minV = -20.4191f;
static const float maxV = 50.6398f;
static const float minW = -11.276f;
static const float maxW = 15.765f;

RWStructuredBuffer<float3> seedBuffer;          // Buffer holding the initial positions of the particles.
RWStructuredBuffer<float3> streamlineBuffer;    // Buffer holding the calculated positions for each trajectory.
RWStructuredBuffer<float3> normalBuffer;        // Buffer holding the normals of the streamlines.
RWStructuredBuffer<float3> tangentBuffer;       // Buffern holding the tangent lines of the streamlines.

// Texture holding the vectorfield.
Texture3D<float4> vectorfieldTexture;
SamplerState sampler_vectorfieldTexture;
SamplerState my_trilinear_repeat_sampler;

// Buffer holding general information.
uint maxStreamlineCount;
uint streamlineCount;
uint iteratorSteps;
float stepSize;

float3 Decode(float4 encoding) {

    // The actual decoding.
    float U = encoding.r * (maxU - minU) + minU;
    float V = encoding.g * (maxV - minV) + minV;
    float W = encoding.b * (maxW - minW) + minW;

    return float3(U, V, W);
}

float4 SampleVectorField(float3 position) {

    // Calculate uvw based on position.
    float u = position.x / xDim;
    float v = position.y / yDim;
    float w = position.z / zDim;
    float3 uvw = float3(u, v, w);
    return vectorfieldTexture.SampleLevel(my_trilinear_repeat_sampler, uvw, 0);
}

float3 RK4Step(float3 x, float h) {
    float3 k1 = Decode(SampleVectorField(x));
    float3 k2 = Decode(SampleVectorField(x + h / 2.0f * k1));
    float3 k3 = Decode(SampleVectorField(x + h / 2.0f * k2));
    float3 k4 = Decode(SampleVectorField(x + h * k3));
    x += (k1 / 2.0f + k2 + k3 + k4 / 2.0f) / 3.0f * h;
    return x;
}

[numthreads(64, 1, 1)]
void Iterator(uint id: SV_DispatchThreadID) {
    
    // Get initial position and store it.
    float3 position = seedBuffer[id];

    for (uint i = 0; i < iteratorSteps; i++) {
        streamlineBuffer[id + i * maxStreamlineCount] = position;
        position = RK4Step(position, stepSize);
    }
}

[numthreads(64, 1, 1)]
void Reconstructor(uint id: SV_DispatchThreadID) {

    // Reconstruct first point.
    float3 p0 = streamlineBuffer[id];
    float3 p1 = streamlineBuffer[id + maxStreamlineCount];
    float3 t0 = normalize(p1 - p0);
    float3 b0 = cross(t0, normalize(p0));
    float3 n0 = cross(b0, t0);
    tangentBuffer[id] = t0;
    normalBuffer[id] = n0;

    // Reconstruct remaining streamline except last position.
    for (uint i = 1; i < iteratorSteps - 1; i++) {
        uint idx = id + i * maxStreamlineCount;
        float p0 = streamlineBuffer[idx - maxStreamlineCount];
        float p2 = streamlineBuffer[idx + maxStreamlineCount];
        float t1 = normalize(p2 - p0);
        float n1 = normalize(cross(b0, t1));
        tangentBuffer[idx] = t1;
        normalBuffer[idx] = n1;
        b0 = cross(t1, n1);
    }

    // Reconstruct last point.
    uint idx = id + (iteratorSteps - 1) * maxStreamlineCount;
    p0 = streamlineBuffer[idx - maxStreamlineCount];
    p1 = streamlineBuffer[idx];
    float3 t1 = normalize(p1 - p0);
    float3 n1 = normalize(cross(b0, t1));
    tangentBuffer[idx] = t1;
    normalBuffer[idx] = n1;
}

